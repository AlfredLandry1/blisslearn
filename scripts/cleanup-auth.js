const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function cleanupAuth() {
  try {
    console.log('üßπ Nettoyage des donn√©es d\'authentification...\n');

    // Supprimer l'utilisateur Google corrompu
    const userToDelete = await prisma.user.findUnique({
      where: { email: 'alfredlandrytalom2004@gmail.com' }
    });

    if (userToDelete) {
      console.log(`üóëÔ∏è Suppression de l'utilisateur: ${userToDelete.email}`);
      
      // Supprimer d'abord les r√©ponses d'onboarding
      try {
        await prisma.onboarding_responses.deleteMany({
          where: { userId: userToDelete.id }
        });
        console.log('‚úÖ R√©ponses d\'onboarding supprim√©es');
      } catch (error) {
        console.log('‚ÑπÔ∏è Aucune r√©ponse d\'onboarding √† supprimer');
      }

      // Supprimer les comptes
      try {
        await prisma.account.deleteMany({
          where: { userId: userToDelete.id }
        });
        console.log('‚úÖ Comptes supprim√©s');
      } catch (error) {
        console.log('‚ÑπÔ∏è Aucun compte √† supprimer');
      }

      // Supprimer les sessions
      try {
        await prisma.session.deleteMany({
          where: { userId: userToDelete.id }
        });
        console.log('‚úÖ Sessions supprim√©es');
      } catch (error) {
        console.log('‚ÑπÔ∏è Aucune session √† supprimer');
      }

      // Supprimer l'utilisateur
      await prisma.user.delete({
        where: { id: userToDelete.id }
      });
      console.log('‚úÖ Utilisateur supprim√©');
    } else {
      console.log('‚ÑπÔ∏è Aucun utilisateur √† supprimer');
    }

    console.log('\n‚úÖ Nettoyage termin√© !');
    console.log('üîÑ Tu peux maintenant tester la connexion Google √† nouveau');

  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanupAuth(); 