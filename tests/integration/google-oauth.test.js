const { config } = require('dotenv');
const path = require('path');
const https = require('https');

// Charger les variables d'environnement
config({ path: path.resolve(process.cwd(), '.env.local') });

console.log('üîç Test de validation Google OAuth');
console.log('==================================');

const clientId = process.env.GOOGLE_CLIENT_ID;
const clientSecret = process.env.GOOGLE_CLIENT_SECRET;

console.log('Client ID:', clientId);
console.log('Client Secret:', clientSecret ? 'D√©fini' : 'Non d√©fini');

// Test de validation du Client ID
function validateClientId(clientId) {
  if (!clientId) return false;
  
  // Format Google OAuth Client ID
  const googleClientIdPattern = /^\d+-\w+\.apps\.googleusercontent\.com$/;
  return googleClientIdPattern.test(clientId);
}

// Test de validation du Client Secret
function validateClientSecret(clientSecret) {
  if (!clientSecret) return false;
  
  // Format Google OAuth Client Secret (commence par GOCSPX-)
  const googleClientSecretPattern = /^GOCSPX-[A-Za-z0-9_-]+$/;
  return googleClientSecretPattern.test(clientSecret);
}

console.log('\nüìã Validation des formats:');
console.log('Client ID valide:', validateClientId(clientId) ? '‚úÖ' : '‚ùå');
console.log('Client Secret valide:', validateClientSecret(clientSecret) ? '‚úÖ' : '‚ùå');

// Test de connexion √† l'API Google OAuth
function testGoogleOAuthEndpoint() {
  return new Promise((resolve) => {
    const options = {
      hostname: 'accounts.google.com',
      port: 443,
      path: '/.well-known/openid_configuration',
      method: 'GET'
    };

    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const config = JSON.parse(data);
          console.log('‚úÖ Connexion √† Google OAuth API r√©ussie');
          console.log('   Issuer:', config.issuer);
          console.log('   Authorization endpoint:', config.authorization_endpoint);
          resolve(true);
        } catch (error) {
          console.log('‚ùå Erreur lors du parsing de la r√©ponse Google');
          resolve(false);
        }
      });
    });

    req.on('error', (error) => {
      console.log('‚ùå Erreur de connexion √† Google OAuth API:', error.message);
      resolve(false);
    });

    req.setTimeout(5000, () => {
      console.log('‚ùå Timeout lors de la connexion √† Google OAuth API');
      req.destroy();
      resolve(false);
    });

    req.end();
  });
}

// Test de configuration NextAuth
async function testNextAuthConfig() {
  console.log('\nüîß Test de configuration NextAuth:');
  
  try {
    // Simuler la configuration NextAuth
    const NextAuth = require('next-auth');
    const GoogleProvider = require('next-auth/providers/google');
    
    console.log('‚úÖ NextAuth et GoogleProvider charg√©s avec succ√®s');
    
    // V√©rifier que les variables sont disponibles
    if (!process.env.GOOGLE_CLIENT_ID || !process.env.GOOGLE_CLIENT_SECRET) {
      console.log('‚ùå Variables Google OAuth manquantes');
      return false;
    }
    
    console.log('‚úÖ Variables Google OAuth disponibles');
    
    // Test de cr√©ation du provider (sans initialiser NextAuth)
    try {
      const provider = GoogleProvider({
        clientId: process.env.GOOGLE_CLIENT_ID,
        clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      });
      
      console.log('‚úÖ GoogleProvider cr√©√© avec succ√®s');
      console.log('   Provider ID:', provider.id);
      console.log('   Provider name:', provider.name);
      
      return true;
    } catch (error) {
      console.log('‚ùå Erreur lors de la cr√©ation du GoogleProvider:', error.message);
      return false;
    }
    
  } catch (error) {
    console.log('‚ùå Erreur lors du chargement de NextAuth:', error.message);
    return false;
  }
}

// Test principal
async function runTests() {
  console.log('\nüöÄ Tests en cours...\n');
  
  // Test 1: Validation des formats
  const formatValid = validateClientId(clientId) && validateClientSecret(clientSecret);
  
  // Test 2: Connexion √† Google OAuth API
  const apiValid = await testGoogleOAuthEndpoint();
  
  // Test 3: Configuration NextAuth
  const nextAuthValid = await testNextAuthConfig();
  
  console.log('\nüìä R√©sum√© des tests:');
  console.log('==================================');
  console.log('Format des cl√©s:', formatValid ? '‚úÖ' : '‚ùå');
  console.log('API Google accessible:', apiValid ? '‚úÖ' : '‚ùå');
  console.log('Configuration NextAuth:', nextAuthValid ? '‚úÖ' : '‚ùå');
  
  if (formatValid && apiValid && nextAuthValid) {
    console.log('\n‚úÖ Tous les tests sont pass√©s !');
    console.log('Le probl√®me pourrait venir de :');
    console.log('1. URLs autoris√©es dans Google Console');
    console.log('2. Configuration de l\'√©cran de consentement');
    console.log('3. Probl√®me de cache du navigateur');
  } else {
    console.log('\n‚ùå Probl√®mes d√©tect√©s :');
    if (!formatValid) console.log('- Format des cl√©s invalide');
    if (!apiValid) console.log('- Impossible de contacter Google OAuth API');
    if (!nextAuthValid) console.log('- Probl√®me de configuration NextAuth');
  }
  
  console.log('\nüí° V√©rifications suppl√©mentaires :');
  console.log('1. V√©rifiez dans Google Console que http://localhost:3000 est dans les URLs autoris√©es');
  console.log('2. V√©rifiez que http://localhost:3000/api/auth/callback/google est dans les URLs de redirection');
  console.log('3. V√©rifiez que votre email est dans la liste des utilisateurs de test');
  console.log('4. Essayez de vider le cache du navigateur');
}

runTests().catch(console.error); 