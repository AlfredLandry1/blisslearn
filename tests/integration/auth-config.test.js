const { config } = require('dotenv');
const path = require('path');

// Charger les variables d'environnement
config({ path: path.resolve(process.cwd(), '.env.local') });

console.log('üîç Test de configuration NextAuth');
console.log('================================');

// V√©rifier les variables essentielles
console.log('1. Variables d\'environnement:');
console.log('   NEXTAUTH_URL:', process.env.NEXTAUTH_URL || '‚ùå Non d√©fini');
console.log('   NEXTAUTH_SECRET:', process.env.NEXTAUTH_SECRET ? '‚úÖ D√©fini' : '‚ùå Non d√©fini');
console.log('   GOOGLE_CLIENT_ID:', process.env.GOOGLE_CLIENT_ID || '‚ùå Non d√©fini');
console.log('   GOOGLE_CLIENT_SECRET:', process.env.GOOGLE_CLIENT_SECRET ? '‚úÖ D√©fini' : '‚ùå Non d√©fini');
console.log('   DATABASE_URL:', process.env.DATABASE_URL || '‚ùå Non d√©fini');

// V√©rifier le format des cl√©s Google
console.log('\n2. Validation des cl√©s Google:');
const clientId = process.env.GOOGLE_CLIENT_ID;
const clientSecret = process.env.GOOGLE_CLIENT_SECRET;

if (clientId) {
  if (clientId.includes('your-google-client-id') || clientId.includes('123803664367')) {
    console.log('   ‚ùå GOOGLE_CLIENT_ID semble √™tre une valeur de test');
  } else if (clientId.endsWith('.apps.googleusercontent.com')) {
    console.log('   ‚úÖ GOOGLE_CLIENT_ID format valide');
  } else {
    console.log('   ‚ö†Ô∏è GOOGLE_CLIENT_ID format suspect');
  }
}

if (clientSecret) {
  if (clientSecret.includes('your-google-client-secret') || clientSecret.includes('GOCSPX-')) {
    console.log('   ‚ùå GOOGLE_CLIENT_SECRET semble √™tre une valeur de test');
  } else if (clientSecret.startsWith('GOCSPX-')) {
    console.log('   ‚úÖ GOOGLE_CLIENT_SECRET format valide');
  } else {
    console.log('   ‚ö†Ô∏è GOOGLE_CLIENT_SECRET format suspect');
  }
}

// Test de connexion √† la base de donn√©es
console.log('\n3. Test de connexion √† la base de donn√©es:');
const { PrismaClient } = require('@prisma/client');

async function testDatabase() {
  const prisma = new PrismaClient();
  try {
    await prisma.$connect();
    console.log('   ‚úÖ Connexion √† la base de donn√©es r√©ussie');
    
    // Test de requ√™te simple
    const userCount = await prisma.user.count();
    console.log('   ‚úÖ Requ√™te de test r√©ussie (utilisateurs:', userCount, ')');
  } catch (error) {
    console.log('   ‚ùå Erreur de connexion √† la base de donn√©es:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testDatabase().then(() => {
  console.log('\nüìã R√©sum√©:');
  console.log('================================');
  
  const issues = [];
  
  if (!process.env.GOOGLE_CLIENT_ID || process.env.GOOGLE_CLIENT_ID.includes('your-google-client-id')) {
    issues.push('- Cl√©s Google OAuth manquantes ou invalides');
  }
  
  if (!process.env.NEXTAUTH_SECRET) {
    issues.push('- NEXTAUTH_SECRET manquant');
  }
  
  if (!process.env.DATABASE_URL) {
    issues.push('- DATABASE_URL manquant');
  }
  
  if (issues.length === 0) {
    console.log('‚úÖ Configuration semble correcte');
  } else {
    console.log('‚ùå Probl√®mes d√©tect√©s:');
    issues.forEach(issue => console.log(issue));
  }
  
  console.log('\nüí° Solutions:');
  console.log('1. Configurez vos vraies cl√©s Google OAuth dans .env.local');
  console.log('2. V√©rifiez que votre base de donn√©es MySQL est active');
  console.log('3. Red√©marrez le serveur apr√®s modification des variables');
}); 