generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model user {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  provider      String?   @default("credentials")
  
  // Champs d'onboarding
  onboardingCompleted Boolean @default(false)
  onboardingStep      Int     @default(1)
  
  // Champs de profil
  bio           String?   @db.Text
  location      String?
  website       String?
  company       String?
  jobTitle      String?
  skills        String?   @db.Text // JSON des compétences
  interests     String?   @db.Text // JSON des centres d'intérêt
  learningGoals String?   @db.Text // JSON des objectifs d'apprentissage
  
  // Champs de préférences
  timezone      String?   @default("Europe/Paris")
  language      String?   @default("fr")
  emailNotifications Boolean @default(true)
  pushNotifications Boolean @default(true)
  
  // Champs de statistiques
  totalCoursesStarted    Int @default(0)
  totalCoursesCompleted  Int @default(0)
  totalTimeSpent         Int @default(0) // en minutes
  totalCertifications    Int @default(0)
  streakDays             Int @default(0)
  lastActivityAt         DateTime?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      account[]
  sessions      session[]
  userCourseProgress user_course_progress[]
  onboardingResponses onboarding_responses[]
  passwordResetTokens passwordResetToken[]
  chatMessages  chat_message[]
  certifications certification[]
  notifications notification[]

  @@index([onboardingCompleted])
  @@index([lastActivityAt])
}

model onboarding_responses {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Étape 1: Objectifs d'apprentissage
  learningObjectives    String   @db.Text // JSON array des objectifs
  
  // Étape 2: Domaines d'intérêt
  domainsOfInterest     String   @db.Text // JSON array des domaines
  
  // Étape 3: Niveau de compétence
  skillLevel            String
  
  // Étape 4: Disponibilité horaire
  weeklyHours           Int
  
  // Étape 5: Plateformes préférées
  preferredPlatforms    String   @db.Text // JSON array des plateformes
  
  // Étape 6: Préférences de cours
  courseFormat          String   @db.Text // JSON array des formats
  courseDuration        String
  courseLanguage        String
  
  // Étape 7: Récapitulatif et finalisation
  isCompleted           Boolean  @default(false)
  completedAt           DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([userId])
}

model verificationtoken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Token de réinitialisation de mot de passe
model passwordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model chat_message {
  id        String   @id @default(cuid())
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String   // "user" ou "assistant"
  content   String   @db.Text
  createdAt DateTime @default(now())
}

model course {
  id                    Int      @id @default(autoincrement())
  course_id             String   @unique // UUID du CSV
  title                 String
  link                  String   @db.Text // URL du cours
  platform              String
  institution           String?
  instructor            String?
  description           String?  @db.Text
  skills                String?  @db.Text // JSON ou liste de skills
  category              String?
  level_normalized      String?  // Niveau normalisé (beginner, intermediate, advanced)
  duration_hours        Float?   // Durée en heures
  price_numeric         Float?   // Prix numérique
  rating_numeric        Float?   // Note numérique
  reviews_count_numeric Int?     // Nombre d'avis
  enrolled_students     String?  // Peut contenir des virgules, donc String
  course_type           String?  // Type de cours (Certification course, etc.)
  mode                  String?  // Mode d'apprentissage
  availability          String?  // Disponibilité
  source_file           String?  // Fichier source (alison.csv, etc.)
  
  // Champs existants conservés pour compatibilité
  provider              String?
  level                 String?  // Ancien champ level
  duration              String?  // Ancien champ duration
  rating                Float?   // Ancien champ rating
  price                 String?  // Ancien champ price
  language              String?
  format                String?
  start_date            DateTime?
  url                   String?  // Ancien champ url
  certificate_type      String?
  extra                 String?  @db.Text
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  userCourseProgress    user_course_progress[]
  learningPathCourses   learning_path_course[]
  certifications        certification[]
  
  @@index([platform])
  @@index([category])
  @@index([level_normalized])
  @@index([course_type])
  @@index([institution])
  @@index([rating_numeric])
  @@index([price_numeric])
}

model user_course_progress {
  id          String   @id @default(cuid())
  userId      String
  courseId    Int
  status      String   // "not_started", "in_progress", "completed", "paused", "abandoned"
  startedAt   DateTime?
  completedAt DateTime?
  favorite    Boolean  @default(false)
  notes       String?  @db.Text
  
  // Nouveaux champs pour le suivi de progression
  progressPercentage Decimal? @db.Decimal(5,2) // 0.00 à 100.00
  timeSpent          Int?     // Temps passé en minutes
  lastActivityAt     DateTime? // Dernière activité sur le cours
  currentPosition    String?  // Position actuelle (ex: "Chapitre 3, Leçon 2")
  bookmarks          String?  @db.Text // JSON des signets/positions sauvegardées
  rating             Int?     // Note donnée par l'utilisateur (1-5)
  review             String?  @db.Text // Avis/commentaire de l'utilisateur
  difficulty         String?  // "easy", "medium", "hard" - évaluation utilisateur
  completionDate     DateTime? // Date de fin réelle
  
  updatedAt   DateTime @updatedAt

  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // Relations vers les paliers et rapports
  milestones milestone[]
  reports    course_report[]
  certifications certification[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([status])
  @@index([lastActivityAt])
}

// Nouveau modèle pour les paliers de progression
model milestone {
  id          String   @id @default(cuid())
  userId      String
  courseId    Int
  progressId  String
  
  // Informations du palier
  percentage  Int      // 25, 50, 75, 100
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  
  // Données de progression au moment du palier
  timeSpentAtMilestone Int?     // Temps passé en minutes à ce palier
  positionAtMilestone  String?  // Position actuelle à ce palier
  notesAtMilestone     String?  @db.Text // Notes spécifiques à ce palier
  
  // Informations d'apprentissage fournies par l'utilisateur
  learningSummary      String?  @db.Text // Résumé de ce qui a été appris
  keyConcepts          String?  @db.Text // Concepts clés maîtrisés (JSON)
  challenges           String?  @db.Text // Difficultés rencontrées
  nextSteps            String?  @db.Text // Prochaines étapes prévues
  
  // Validation et métadonnées
  validatedAt          DateTime?
  lastUpdatedAt        DateTime? // Dernière mise à jour automatique des données
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user_course_progress user_course_progress @relation(fields: [progressId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, percentage])
  @@index([userId, courseId])
  @@index([progressId])
}

// Nouveau modèle pour les rapports IA générés
model course_report {
  id          String   @id @default(cuid())
  userId      String
  courseId    Int
  progressId  String
  
  // Informations du rapport
  title       String   // Titre du rapport
  type        String   // "milestone_summary", "course_completion", "learning_review"
  milestonePercentage Int? // Pourcentage du palier associé (si applicable)
  
  // Contenu généré par l'IA
  summary     String   @db.Text // Résumé généré
  keyPoints   String   @db.Text // Points clés (JSON)
  recommendations String? @db.Text // Recommandations pour la suite
  insights    String?  @db.Text // Insights et observations
  
  // Métadonnées
  generatedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user_course_progress user_course_progress @relation(fields: [progressId], references: [id], onDelete: Cascade)

  @@index([userId, courseId])
  @@index([progressId])
  @@index([type])
}

// Parcours d'apprentissage structurés (fonctionnalité future)
// Permet de créer des séquences de cours organisées logiquement
model learning_path {
  id          String   @id @default(cuid())
  title       String   // Titre du parcours (ex: "Développement Web Frontend")
  description String?  // Description détaillée du parcours
  createdBy   String?  // ID de l'utilisateur qui a créé le parcours
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     learning_path_course[] // Relation vers les cours du parcours
}

// Table de liaison entre parcours et cours
// Permet d'associer plusieurs cours à un parcours avec un ordre spécifique
model learning_path_course {
  id             String   @id @default(cuid())
  learningPathId String   // Référence vers le parcours
  courseId       Int      // Référence vers le cours

  learning_path learning_path @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  course        course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

// Modèle pour les certifications obtenues par les utilisateurs
model certification {
  id          String   @id @default(cuid())
  userId      String
  courseId    Int
  progressId  String
  
  // Informations de la certification
  title       String   // Titre de la certification
  description String?  @db.Text // Description détaillée
  certificateNumber String @unique // Numéro unique de certification
  issuedAt    DateTime @default(now()) // Date d'émission
  expiresAt   DateTime? // Date d'expiration (optionnelle)
  
  // Métadonnées du cours
  courseTitle String   // Titre du cours au moment de la certification
  institution String?  // Institution du cours
  level       String?  // Niveau du cours
  duration    String?  // Durée du cours
  
  // Statistiques de l'apprenant
  timeSpent   Int?     // Temps total passé en minutes
  completionDate DateTime // Date de complétion du cours
  
  // Statut et validation
  status      String   @default("active") // "active", "expired", "revoked"
  isVerified  Boolean  @default(true) // Certification vérifiée par la plateforme
  
  // Relations
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user_course_progress user_course_progress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([courseId])
  @@index([progressId])
  @@index([certificateNumber])
  @@index([issuedAt])
  @@index([status])
}

model notification {
  id          String   @id @default(cuid())
  userId      String
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Contenu de la notification
  title       String?  // Titre de la notification
  message     String   @db.Text // Message principal
  type        String   // "success", "error", "info", "warning"
  
  // Métadonnées
  read        Boolean  @default(false) // Si la notification a été lue
  readAt      DateTime? // Date de lecture
  duration    Int?     // Durée d'affichage en millisecondes
  
  // Données contextuelles (optionnelles)
  actionUrl   String?  // URL d'action associée
  actionText  String?  // Texte du bouton d'action
  metadata    String?  @db.Text // Données JSON supplémentaires
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Index pour la suppression automatique et les requêtes
  @@index([userId, createdAt])
  @@index([createdAt]) // Pour la suppression automatique
}